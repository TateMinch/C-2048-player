*  Choose a name for the player (put a Name file in your repo)
*  Code compiles
*  Code runs and plays the game
*  Player averages better than the random player
*  Player averages better than the greedy player
-  All team members show repository activity
--------------------------------------------------------------------------------
Total % : 5/5  commit [778d3074c3d65] used

Notes:

   * Simply updating a text file with a name does not meet the requirement
     of 'All team members show repository activity'.
    
   * If the team is doing paired or team programming, that must be documented
     in the commit logs.

   * Projects do not, necessarily, require that all team members receive the
     same grade.  I reserve the right to assign different grades for each
     member of a team.

   * Player is working so far, so good, keep an eye on the upcoming 
     checkpoint requirements and the performance of the greedy player as it
     will improve over time.

--------------------------------------------------------------------------------
Checkpoint 2:

  All requirements from Checkpoint 1 (no regressions).  Greedy is getting better
  Writeup describing your algorithm / method of play (1-2 paragraphs)
  Player averages 10% better than <b>your</b> checkpoint 1 player
  All team members show significant repository activity

Potential deductions for final submission
  Unnecessary / incorrect files in the repository (binary, object, editor swap)
  Memory leaks
  Console spam
--------------------------------------------------------------------------------
Total % : 5/5  commit [f1b919cda9a] used

Notes:
   
   * Staying ahead of Greedy player, good job but don't just sit on your score
     see how far you can improve your player.

   * Still not equal activity in the repository, make sure you're indicating
     if there is paired or team programming going on.

   * Also, make sure you go through and clean up the code to make the coding
     standard consistent, the code modular and readable.

   * The writeup needs serious work.  Don't just write words that describe
     the program statements.  *I* can read the code.  Describe the algorithm
     which you're using to try to increase your average and maximum score.
     'We initialize the bestMove variable to "NONE"'.  Are you kidding?

-------------------------------------------------------------------------------
Final Review:

   * Your final player ended up beating the greedy player which
     uses just an objective function with no lookahead.

   * Your writeup/log seems to indicate you did some thought about various
     ways to increase scores.  Minimax and expectimax have both been
     techniques used by others in an attempt to get higher scores.

   * The idea that a better objective function could be the key to higher
     scores is something to be considered.  One intuition concerning
     recursively searching for further and further future boards would be
     that the deeper the board, the less likely it would ever be encountered

   * Good internal documentation including function headers.  If you ever
     return to the project you will at least have an idea as to what you
     were doing / hoping to accomplish and how you believed that that would
     be realized.

   * All-in-all a decent job which managed to surpass the greedy player
     by a solid margin.

   * I hope this project helped you get better at the basic task of
     turning an idea into functional code.  One of the major goals of this
     course.

   * Given the disproportionate amount of recorded effort between the two
     team members, the grades will not be the same.

Checkpoint deduct    :  -0%
Beating Random       :  40%
Beating Greedy       :  30%
Documentation        :  +8% (even excessive in some cases)
Scoreboard placement :  +9%
Writeup              :  +0% (A writeup isn't a reading of the code)
---------------------------
Total Score          :  87%

